package it.polimi.ingsw.view;

import it.polimi.ingsw.Message;
import it.polimi.ingsw.MessageType;
import it.polimi.ingsw.exceptions.DuplicatedIdException;
import it.polimi.ingsw.exceptions.IncorrectAmountArgumentsException;
import it.polimi.ingsw.exceptions.UnknownCommandException;

import java.util.*;

public class CommandParser {
    private final Map<String, List<Integer>> commandArguments;
    private final Map<String, MessageType> commands;

    public CommandParser(){
        commandArguments=new HashMap<>();
        commands=new HashMap<>();
    }

    /**
     * Adds a command to the commandArguments table and the commands table
     * @param command Command keyword
     * @param numberOfArguments Number of arguments
     * @param messageType Message type generated by the command
     * @throws DuplicatedIdException Command already exists in the tables
     */
    public void addCommand(String command,int numberOfArguments, MessageType messageType) throws DuplicatedIdException {
        if(commandArguments.containsKey(command)) {
            if(!commandArguments.get(command).contains(numberOfArguments)) commandArguments.get(command).add(numberOfArguments);
        }else{
            commandArguments.put(command,new ArrayList<>());
            commandArguments.get(command).add(numberOfArguments);
        }
        commands.put(command,messageType);
    }

    /**
     * Parses a string representing a command
     * @param input String representing the command
     * @return Message associated with such command
     * @throws IncorrectAmountArgumentsException Command requires more or less arguments
     * @throws UnknownCommandException Command is unknown
     */
    public Message parseCommand(String input) throws IncorrectAmountArgumentsException,UnknownCommandException {
        String[] inputSplit= input.split(" ");
        List<Integer> values=commandArguments.get(inputSplit[0]);
        if(values==null){
            throw new UnknownCommandException();
        }
        boolean ok=false;
        for(Integer v:values){
            if(inputSplit.length-1==v){
                ok=true;
                break;
            }
        }
        if(!ok) throw new IncorrectAmountArgumentsException();
        return new Message(commands.get(inputSplit[0]), Arrays.copyOfRange(inputSplit,1,inputSplit.length));
    }

    /**
     * Gets the number of arguments required by a command (command is supposed to be valid)
     * @param input String representing the command
     * @return Number of arguments
     */
    public List<Integer> getNumberOfArguments(String input){
        return commandArguments.get(input.split(" ")[0]);
    }
}
